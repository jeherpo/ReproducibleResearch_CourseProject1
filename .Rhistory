plot1 <- function() {
library(dplyr)
fileURL<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
td=tempdir()
tf = tempfile(tmpdir=td,fileext=".zip")
download.file(fileURL,tf)
list.files<-unzip(tf,list=TRUE)
name1 = list.files$Name[1]
unzip(tf, files = name1, exdir=td, overwrite = TRUE)
path1 = file.path(td, name1)
initial<-read.table(path1,nrows=100,na.strings = "?",sep=";",header = TRUE)
names<-colnames(initial)
classes <- sapply(initial,class)
data<-read.table(path1, colClasses = classes, na.strings = "?",sep=";",header = FALSE,skip=66637,nrows=2880)
colnames(data)<-names
###Create the plot
png(filename="plot1.png",width=480,height=480)
hist(data$Global_active_power, col="red", breaks = 12, main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
}
plot1 <- function() {
library(dplyr)
fileURL<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
td=tempdir()
tf = tempfile(tmpdir=td,fileext=".zip")
download.file(fileURL,tf)
list.files<-unzip(tf,list=TRUE)
name1 = list.files$Name[1]
unzip(tf, files = name1, exdir=td, overwrite = TRUE)
path1 = file.path(td, name1)
initial<-read.table(path1,nrows=100,na.strings = "?",sep=";",header = TRUE)
names<-colnames(initial)
classes <- sapply(initial,class)
data<-read.table(path1, colClasses = classes, na.strings = "?",sep=";",header = FALSE,skip=66637,nrows=2880)
colnames(data)<-names
###Create the plot
png(filename="plot1.png",width=480,height=480)
hist(data$Global_active_power, col="red", breaks = 12, main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
}
dev.off
plot1 <- function() {
library(dplyr)
fileURL<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
td=tempdir()
tf = tempfile(tmpdir=td,fileext=".zip")
download.file(fileURL,tf)
list.files<-unzip(tf,list=TRUE)
name1 = list.files$Name[1]
unzip(tf, files = name1, exdir=td, overwrite = TRUE)
path1 = file.path(td, name1)
initial<-read.table(path1,nrows=100,na.strings = "?",sep=";",header = TRUE)
names<-colnames(initial)
classes <- sapply(initial,class)
data<-read.table(path1, colClasses = classes, na.strings = "?",sep=";",header = FALSE,skip=66637,nrows=2880)
colnames(data)<-names
###Create the plot
png(filename="plot1.png",width=480,height=480)
hist(data$Global_active_power, col="red", breaks = 12, main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
}
plot2 <- function(){
library(dplyr)
fileURL<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
td=tempdir()
tf = tempfile(tmpdir=td,fileext=".zip")
download.file(fileURL,tf)
list.files<-unzip(tf,list=TRUE)
name1 = list.files$Name[1]
unzip(tf, files = name1, exdir=td, overwrite = TRUE)
path1 = file.path(td, name1)
initial<-read.table(path1,nrows=100,na.strings = "?",sep=";",header = TRUE)
names<-colnames(initial)
classes <- sapply(initial,class)
data<-read.table(path1, na.strings = "?",sep=";",header = FALSE,skip=66637,nrows=2880,stringsAsFactors = FALSE,colClasses=classes)
colnames(data)<-names
data<-transform(data, Date = as.character(Date))
data<-mutate(data,DT=paste(data$Date,data$Time))
data<-transform(data,DT=strptime(data$DT, format = "%d/%m/%Y %H:%M:%S"))
## Create the plot
png(filename="plot2.png",width=480,height=480)
plot(data$DT,data$Global_active_power,type="l",xlab="",ylab="Global Active Power (kilowatts)")
dev.off()
}
library(dplyr)
library(lubridate)
#########################################
# 1. Download and upzip the data folder #
#########################################
# Download zip file from the website provided in the README.md
zipurl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
zipfile <- "household_power_consumption.txt"
if(!file.exists(zipfile)) {
download.file(zipurl, zipfile, mode = "wb")
}
# Unzips file
if(!file.exists(zipfile)) {
upzip(zipfile)
}
#############################################################
# 2. Reads a subset of the data file and cleans up data file#
#############################################################
# a. Initial reading into R
epc <- read.table(zipfile, na.strings = "?", sep = ";", skip = 66638, nrows = 3000)
# b. Change dates and times to POSIXct class
epc$V1 <- dmy(epc$V1)
epc$V2 <- hms(epc$V2)
# c. Subset epc from 2007-02-01 to 2007-02-02
epcFinal <- subset(epc, V1 >= "2007-02-01" & V1 <= "2007-02-02")
# d. Insert header names
names(epcFinal) <- c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
######################
# 3. Creating plot 1 #
######################
hist(epcFinal$Global_active_power, xlab = "Global Active Power (kilowatts)", ylab = "Frequency", main = "Global Active Power", col = "red")
##################################
# 4. Copy the plot to a PNG file #
##################################
dev.copy(png, file = "plot1.png")
dev.off()
remove(list = ls=())
rm(list = ls=())
remove(list = ls())
library(lattice)
library(datasets)
# simple scatterplot
xyplot(Ozone ~ Wind, data=airquality)
library(lattice)
library(datasets)
# Convert "Month" to a factor variable
airquality<- transform(airquality, Month= factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality. layout= c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout= c(5,1))
p<- xyplot(Ozone~Wind, data=airquality)
print(p)
xyplot(Ozone~Wind, data=airquality)
set.seed(10)
x<- rnorm(100)
x
f<- rep(0:1, each=50)
f
y<- x+f-f*x+rnorm(100, sd=0.5)
y
f<- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y~x | f. layout= c(2,1)) # Plot with 2 panels
xyplot(y~x | f, layout= c(2,1)) # Plot with 2 panels
panel.xyplot(x,y,...)
xyplot(y~x | f, panel= function(x,y,...) {
panel.xyplot(x,y,...)
panel.abline(h=median(y), lty=2)
})
xyplot(y~x | f, panel= function(x,y,...) {
panel.xyplot(x,y,...)
panel.lmline(x, y, col=2)
})
library(ggplot2)
str(mpg)
gplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, main = "Display and Highway")
qplot(displ, hwy, data=mpg, main = "Display and Highway", color=drv)
qplot(displ, hwy, data=mpg, main = "Display and Highway", geom=c("point","smooth"))
qplot(hwy, data=mpg, color=drv)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets= .~drv)
qplot(displ, hwy, data=mpg, color=drv, facets= .~drv)
qplot(hwy, data=mpg, color=drv, facets= drv~.)
qplot(hwy, data=mpg, color=drv, facets= drv~., bindwith=2)
qplot(hwy, data=mpg, color=drv, facets= drv~., bindwidth=2)
qplot(displ, hwy, data=mpg, color=drv, facets= drv~.)
qplot(hwy, displ, data=mpg, color=drv, facets= drv~.)
str(maacs)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
set.seed(1234)
par(mar=c(0,0,0,0))
x<- rnorm(12, mean=rep(1:3, each=4), sd=0.2)
y<- rnorm(12, mean=rep(c(1,2,1), each=4), sd=0.2)
x
y
plot(x, y, col="blue", pch=19, cex=2)
text(x + 0.05, y + 0.05, labels=as.character(1:12))
dataFrame<- data.frame(x=x, y=y)
View(dataFrame)
View(dataFrame)
dist(dataFrame)
distxy<- dist(dataFrame)
hClustering<- hclust(distxy)
plot(hClustering)
myplclust(hClustering, lab=rep(1:3, each 4), lab.col= rep(1:3, each=4))
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...){
## modifiction of plclust for plotting hclust objects *in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
##    hclust:    hclust object
##    lab:        a character vector of labels of the leaves of the tree
##    lab.col:    colour for the labels; NA=default device foreground colour
##    hang:     as in hclust & plclust
## Side effect:
##    A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2)
x <- as.numeric(hclust$merge)
y <- y[which(x<0)]
x <- x[which(x<0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang), labels=lab[hclust$order], col=lab.col[hclust$order], srt=90, adj=c(1,0.5), xpd=NA, ... )}
myplclust(hClustering, lab=rep(1:3, each 4), lab.col= rep(1:3, each=4))
myplclust(hClustering, lab=rep(1:3, each= 4), lab.col= rep(1:3, each=4))
dataFrame<- data.frame(x=x, y=y)
set.seed(143)
dataMatrix<- as.matrix(dataFrame)[sample(1:12),]
heatmap(dataMatrix)
dataFrame<- data.frame(x,y)
kmeansObj<- kmeans(dataFrame, centers=3)
names(kmeansObj)
kmeansObj$cluster
par(mar= rep (0.2, 4))
plot(x,y, col=kmeansObj$cluster, pch=19, cex=2)
points(kmeansObj$centers, col= 1:3, pch= 3, cex=3, lwd=3)
swirl::install_course("Hierarchical Clustering")
library(swirl)
swirl()
View(dataFrame)
dist(dataFrame)
hc<-hclust(dataFrame)
hc<-hclust(distxy)
library(swirl)
swirl()
swirl()
swirl()
dist(datFrame)
dist(dataFrame)
hclust(distxy)
hc<- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=4, col="red")
abline(h=.4, col="red")
5
abline(h=.05, col="red")
abline(h=.5, col="red")
abline(h=.08, col="red")
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col set="cm.colors(25)")
heatmap(dataMatrix, colset="cm.colors(25)")
heatmap(dataMatrix, col=cm.colors(25))
heatmao(mt)
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
library(swirl)
swirl()
dim(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1<- subset(ssd, subject=1)
sub1<- subset(ssd, subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist<- dist(sub1[,1:3])
hclust(mdist)
hclustering<- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
mdist<- dist(sub1[,10:12])
hclustering<- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
svd1<- svd(scale(sub1[,-c(562:563)]))
dim(svd1$u)
maxCon<- whixh.max(svd1$v[,2])
maxCon<- which.max(svd1$v[,2])
mdist<- dist(sub1[,10:12])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering<- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust<- kmeans(sub1,centers=6)
kClust<- kmeans(sub1,6)
kClust<- kmeans(sub1[,1:561],6)
kClust<- kmeans(sub1[,1:561],centers=6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kclust$cluster, sub1$activity)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying<- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab = "Laying Cluster")
names(sub1[,1:3])
walking<- which(kClust$size==49)
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
library(swirl)
swirl()
exit
rm(list=ls())
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
strsplit(cnames,"|",fixed=TRUE)
cnames<- strsplit(cnames,"|",fixed=TRUE)
pmo$names
pm0$names
cnames
make.names(cnames)
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0<- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1<- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0).log10(x1))
boxplot(log10(x0),log10(x1))
negative<- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates<- pm1$Date
str(dates)
as.Date(as.character(dates), "%Y%m%d")
dates<- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative],"month")
str(site0)
intersect(site0,site1)
both<- intersect(site0,site1)
both
head(pm0)
cnt0<- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1<- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub<- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub<- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub<- pm0sub$Sample.Value
x1sub<- pm1sub$Sample.Value
dates0<- as.Date(as.character(pm0sub$Date),"%Y%m%d" )
dates1<- as.Date(as.character(pm1sub$Date),"%Y%m%d" )
par(mfrow= c(1,2), mar= c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(median(x0sub), LWD=2, na.rm=TRUE)
abline(x0sub, LWD=2, na.rm=TRUE)
abline(h=median(x0sub, LWD=2, na.rm=T))
abline(h=median(x0sub, lwd=2, na.rm=T))
abline(h=median(x0sub, na.rm=T))
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates1, x1sub, pch=20)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
rng<- range(x0sub, x1sub, na.rm = T)
rng<- range(x0sub, x1sub, na.rm = TRUE)
RNG
rng
mn0<- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
mn0
str(mn0)
mn1<- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
do<- data.frame(state=names(mn0), mena=mn0)
do<- data.frame(state=names(mn0), mean=mn0)
d0<- data.frame(state=names(mn0), mean=mn0)
d1<- data.frame(state=names(mn1), mean=mn1)
mrg<- merge(d0, d1, by="state")
dim(mrg)
head(mrg)
with(mrg,plot(rep(1,52),mrg[,2],xlim=c(.5,2.5)))
with(mrg,points(rep(1,52),mrg[,3]))
with(mrg,points(rep(2,52),mrg[,3]))
segments(rep(1999, 52), mrg[,2], rep(2012,52), mrg[,3])
segments(rep(1, 52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
install.packages("xtable")
setwd("C:/Users/jeher/Dropbox/Data Science Specialization/Reproducible research/datacourseproject1")
read.csv("activity.csv", header = TRUE)
act<- read.csv("activity.csv", header = TRUE)
act<- read.csv("activity.csv", header = TRUE)
steps<- aggregate(act$steps,by=date, FUN=sum(na.rm=FALSE))
steps<- aggregate(act$steps,by=date, FUN=sum)
steps<- aggregate(act$steps ~ date, FUN=sum)
steps<- aggregate(steps ~ date, activity, sum)
steps<- aggregate(steps ~ date, act, sum)
View(steps)
View(steps)
hist(steps)
hist(steps$date,steps$steps)
hist(steps$steps)
hist(steps$date)
hist(steps$steps, breaks = steps$date)
hist(steps$steps, breaks = "date")
hist(steps$steps, breaks = "sturges")
hist(steps$steps, main= "Histogram of total number of steps taken each day", xlab="Steps")
mean(steps$steps)
median(steps$steps)
avg_step_int<- aggregate(steps ~ interval, act, mean)
View(avg_step_int)
View(avg_step_int)
plot(avg_step_int$interval, avg_step_int$steps, type="1", col=1, main="Average number of steps by Interval",
xlab="Time Intervals", ylab="Average number of steps")
plot(avg_step_int$interval, avg_step_int$steps, type="l", col=1, main="Average number of steps by Interval",
xlab="Time Intervals", ylab="Average number of steps")
interval_max_steps <- which.max(avg_step_int$steps)
interval_max_steps
View(avg_step_int)
View(avg_step_int)
avg_step_int[which.max(avg_step_int$steps), ]
missing_value<- is.na(act$steps)
table(missing_value)
subset(act$steps,is.na(TRUE))
subset(act$steps,is.na=T)
View(act)
View(act)
subset(act$steps,steps== "NA")
miss<- subset(act$steps,steps== "NA")
miss<- subset(act,steps== "NA")
View(miss)
View(miss)
miss<- subset(act,act$steps== "NA")
miss<- subset(act,act$steps== "NA")
View(miss)
act1<- read.table(act)
act1<- read.table(act, header = TRUE)
for (i in 1:nrow(act)) {
if(is.na(act$steps[i])) {
val <- avg_step_int$steps[which(avg_step_int$interval == act$interval[i])]
act$steps[i] <- val
}
}
View(act)
View(act)
steps_impute <- aggregate(steps ~ date, act, sum)
hist(steps_impute$steps, main = "Histogram of total number of steps taken each day (Imputed)",
xlab = "Steps per day")
hist(steps_impute$steps, main = "Histogram of total number of steps taken each day (Imputed)",
xlab = "Steps")
mean(steps_impute$steps)
median(steps_impute$steps)
median(steps_impute$steps)
week_day <- function(date_valid) {
wd <- weekdays(as.Date(date_valid, '%Y-%m-%d'))
if  (!(wd == 'Saturday' || wd == 'Sunday')) {
x <- 'Weekday'
} else {
x <- 'Weekend'
}
x
}
act$day_type <- as.factor(sapply(act$date, week_day))
View(act)
steps_impute <- aggregate(steps ~ interval+day_type, act, mean)
View(steps_impute)
View(steps_impute)
print(plt)
plt <- ggplot(steps_impute, aes(interval, steps)) +
geom_line(stat = "identity", aes(colour = day_type)) +
theme_gray() +
facet_grid(day_type ~ ., scales="fixed", space="fixed") +
labs(x="Interval", y=expression("Steps")) +
ggtitle("Steps per Interval by day type")
library(ggplot2)
plt <- ggplot(steps_impute, aes(interval, steps)) +
geom_line(stat = "identity", aes(colour = day_type)) +
theme_gray() +
facet_grid(day_type ~ ., scales="fixed", space="fixed") +
labs(x="Interval", y=expression("Steps")) +
ggtitle("Steps per Interval by day type")
print(plt)
plt <- ggplot(steps_impute, aes(interval, steps)) +
geom_line(stat = "identity", aes(colour = Day_type)) +
theme_gray() +
facet_grid(day_type ~ ., scales="fixed", space="fixed") +
labs(x="Interval", y=expression("Steps")) +
ggtitle("Steps per Interval by day type")
print(plt)
plt <- ggplot(steps_impute, aes(interval, steps)) +
geom_line(stat = "identity", aes(colour = day_type)) +
theme_gray() +
facet_grid(day_type ~ ., scales="fixed", space="fixed") +
labs(x="Interval", y=expression("Steps")) +
ggtitle("Steps per Interval by day type")
print(plt)
